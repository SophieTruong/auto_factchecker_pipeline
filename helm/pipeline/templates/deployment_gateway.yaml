---
# Saml Config map
apiVersion: v1
kind: ConfigMap
metadata:
  name: saml-settings-map
  namespace: {{ $.Release.Namespace }}
data:
  settings.json: |
    {
        "strict": true,
        "debug": true,

        "sp": {        
            "entityId": "https://transcript.k8s.aalto.fi/saml/metadata",
            "assertionConsumerService": {            
                "url": "https://transcript.k8s.aalto.fi/saml/acs",
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"
            },        
            "singleLogoutService": {            
                "url": "https://transcript.k8s.aalto.fi/saml/sls",
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
            },
            "NameIDFormat": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
            "x509cert": "",
            "privateKey": ""
        },         
        "idp" : {
            "entityId" : "https://devel.idp.aalto.fi/idp/shibboleth",
            "singleSignOnService": {
                "url" : "https://devel.idp.aalto.fi/idp/profile/SAML2/Redirect/SSO",
                "binding" : "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" 
            },
            "singleLogoutService": {
                "binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                "url" :"https://devel.idp.aalto.fi/idp/profile/SAML2/Redirect/SLO"
            },
            "x509cert": "MIIFGzCCAwOgAwIBAgIUCH/Md10XaJNOMEHEpbnvdjn0ABEwDQYJKoZIhvcNAQEL BQAwHTEbMBkGA1UEAwwSZGV2ZWwuaWRwLmFhbHRvLmZpMB4XDTE4MTEyODA3NTEz MFoXDTI4MTEyNTA3NTEzMFowHTEbMBkGA1UEAwwSZGV2ZWwuaWRwLmFhbHRvLmZp MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAx6UGxma5RNicPZ78CzQs 2lXsxj9YblGHJkT7vPQzEJvrLvkL7h6mvwhib64d+/z9rkamU4FzosKn95Ac60rM 3X/GOYgqaNw1i2lmxYuvPtzKxD1QT4aQxPoj9OzHDOfj8WqI5Y3v+5sr0N91TQGE +kFy670wwP8UgYx2knw4AEBGi8Eo3W/gUvFk8adIbtgTDIko1bc8Ktal6j487tTC NrZC/yZulmeNJQKtFA2HxQLvLOdK6NwmS1saTYvBl5i6bQGut9+sme1ZGm6DmOae 4KhoD++0fft7KFISrJJHWsYcR+kzrbKXlNf9uEqmu4bicN97mnzoz7Xf4VkvikJR FvftrJA/DDfsBrTLMdgI9sI2o7R47W4CjjiJTgs71xSMt2gMLtP7pWwjRMAQKXR8 UpecJiBi7f7mxOMrQkG8aHHk6E0kohnvn9cbPtiCCyPTUHWZvb7YKnEHFHAJfWTh P2w7RjnfxNYtfZZ4sIXCCigaOLIA+2xYL+IUW3nJMhruifoQQxe8ZDIkhKfYujqk m6aboRkRmj7dtfruv8xMzACrorIOmxwDCSfKut6hE7BhGRqyxmS3J4HN4v43HGxO kZ6gnrpZADfZsuCdnu6RzXgxMHr5HrHNm0irZn6j8juZZ83QlAkDdSXeiF/uM7Ci S3d8mmPhEEsRr0dHuL8spoMCAwEAAaNTMFEwHQYDVR0OBBYEFAJI4SEtrKp90RN3 4Cspn2e4KfgnMB8GA1UdIwQYMBaAFAJI4SEtrKp90RN34Cspn2e4KfgnMA8GA1Ud EwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggIBAJQdKMAaEhjUAqmakVYqzX/w RXaQhhchsPwFwPW/+gv3VzYC1giS63RGipHZKmlJQmXN/FNaRxbpAXbRs6/HoM+h NTqvqONxd62+pZidE9hRfPaYhqoN/G7xv9VGzYZd52s6leSewKr8nhE4feQqtM2h sboCvzp5qjbrRrtZw/4l1c5VpK7XhkCPcLLTrX2xcrVExe2D3ZJAiuhv9ppg8Mza Fe+l3chYo9oO1+5bYODYWQEV8HlE4ihpP76SyD/egy7uqBcA8448fioWflxIAfG4 xqWnPdUMbTnkMptvrKtT+8cr/+9GoSUZMwP+A1rZaxfz0umtEybDfOlSAv4aWZ9+ lJ+U1/eBEa/a4RgutF+Lb8YPn38suNvX54h1tM/vy95VW1sb+4i6P6so8pdpGty6 uTlhYFChcj9gzrl5p8cVqIhkbuTxpSetKPKI3G1sP7h503yrR/t2KubhDtdbHrhM /bkVJutFeQylksvfbKkNJNyjGeSBiw37PXbWeKH71ZtXPG6uM2teuMhHFhoy6/SK c5Ko3acY1076SK6oGEmhi7Ht53Ae7KUo5dTxPfTXz1nyWpWzsifkS/hd7gdzVGXQ anvYDUMe6iKr6Pbk/soyepefLqHrTqSxWgMtDf4ZhBEHwuRxSkjgSSo1XcTuKULA 2zkmEe3gyHpefW3suPwQ"
        
        }
    }
---
# Gateway deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: whisper-gateway
  namespace: {{ $.Release.Namespace }}
  labels:
    app.kubernetes.io/name: whisper-gateway
    app.kubernetes.io/component: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: whisper-gateway
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: whisper-gateway
        app.kubernetes.io/component: server
    spec:
      volumes:
        - name: audio-storage
          persistentVolumeClaim:
            claimName: audio-storage
        - name: saml-settings
          configMap: # or secret if the file is in a secret
            name: saml-settings-map
            items:
              - key: settings.json
                path: settings.json
      containers:
        - name: gateway
          image: "{{ .Values.gateway_image_url }}:{{ .Values.gateway_image_tag }}" #Lets start versioning this
          # Make sure, that the image is always pulled, since we might update for fixes
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
          resources:
            requests:
              # Maybe needs to be increased later on.
              cpu: 2
          env:
            # Mongo settings ( port will be default )
            - {
                name: MONGOUSER,
                valueFrom:
                  { secretKeyRef: { name: databases, key: mongouser } },
              }
            - {
                name: MONGOPASSWORD,
                valueFrom:
                  { secretKeyRef: { name: databases, key: mongopassword } },
              }
            - { name: MONGOHOST, value: "whisper-mongo-svc" }
            # Redis
            - { name: REDISHOST, value: "whisper-redis-svc" }
            - { name: REDISPORT, value: "6379" }
            - {
                name: REDISPASSWORD,
                valueFrom:
                  { secretKeyRef: { name: databases, key: redispassword } },
              }
            # This is the current submission key, which allows usage of the gateway
            - {
                name: SUBMISSION_KEY,
                valueFrom:
                  {
                    secretKeyRef:
                      {
                        name: transcription-gateway-secrets,
                        key: submission_key,
                      },
                  },
              }
            # This is the admin key
            - {
                name: ADMIN_KEY,
                valueFrom:
                  {
                    secretKeyRef:
                      { name: transcription-gateway-secrets, key: admin_key },
                  },
              }
            # This is the session key
            - {
                name: SESSION_KEY,
                valueFrom:
                  {
                    secretKeyRef:
                      { name: transcription-gateway-secrets, key: session_key },
                  },
              }
            - {
                name: SERVICE_TOKEN,
                valueFrom:
                  {
                    secretKeyRef:
                      { name: transcription-communication, key: service_token },
                  },
              }
            # Other Options (not yet in use....)
            - { name: POPUPLOGIN, value: "1" }
            - name: CORS_ORIGINS
              value: '{{ toJson .Values.cors_origins }}'

          volumeMounts:
            - mountPath: /jobs
              name: audio-storage
            - name: saml-settings
              mountPath: /gateway/app/security/saml_data/settings.json
              subPath: settings.json
