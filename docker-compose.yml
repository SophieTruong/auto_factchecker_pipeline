services:
  db:
    hostname: db
    container_name: postgres_db_container
    image: ankane/pgvector
    ports:
     - 5432:5432
    restart: always
    environment:
      - POSTGRES_DB=vectordb
      - POSTGRES_USER=vector
      - POSTGRES_PASSWORD=password
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - database:/var/lib/postgresql/data
      - ./database/pgvector/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: apidev
    command: ["uvicorn", "main:app", "--reload", "--host", "0.0.0.0", "--port", "8080"]
    environment:
      - HF_HOME=/xml-roberta-model
      - SENTENCE_TRANSFORMERS_HOME=/sentence-transformer-model
    ports:
     - 8080:8080
    restart: always
    volumes:
      - xml-roberta-model:/app/xml-roberta-model
      - sentence-transformer-model:/app/sentence-transformer-model
      - logging:/app/logging
    depends_on:
      - "db"
      - "milvus"
    networks:
      - backend

  pgvectorseeding:
    build:
      context: .
      dockerfile: database/pgvector/Dockerfile
    depends_on:
      -  "db"
    volumes:
      - ./database/data:/db/data
      - sentence-transformer-model:/db/sentence-transformer-model
      - logging:/db/logging
    networks:
      - backend

  # https://github.com/milvus-io/milvus/blob/master/deployments/docker/standalone/docker-compose.yml
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - backend

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - backend

  milvus-standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.0
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - backend

networks:
  backend:
    # Specify driver options
    driver: bridge    
volumes:
  database:
  xml-roberta-model:
  sentence-transformer-model:
  logging:
