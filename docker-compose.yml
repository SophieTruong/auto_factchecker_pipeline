services:
  db:
    extends:
      file: ./api_service/docker-compose.yml
      service: db

  # pgvectorseeding:
    # build:
    #   context: .
    #   dockerfile: api/databases/pgvector/Dockerfile
    # depends_on:
    #   -  "db"
    # volumes:
    #   - ./api/databases/data:/db/data
    #   - sentence-transformer-model:/db/sentence-transformer-model
    #   - logging:/db/logging
    # networks:
    #   - backend

  api:
    extends:
      file: ./api_service/docker-compose.yml
      service: api  

  model_inference:
    extends:
      file: ./model_inference_service/docker-compose.yml
      service: model_inference
        
  web_scrape:
    extends:
      file: ./web_scrape/docker-compose.yml
      service: web_scrape
    deploy:
      replicas: 3

  model_monitoring_service:
    extends:
      file: ./model_monitoring_service/docker-compose.yml
      service: model_monitoring_service
  
  evidence_retrieval:
    extends:
      file: ./evidence_retrieval/docker-compose.yml
      service: evidence_retrieval
  
  milvus_standalone:
    extends:
      file: ./milvus_standalone/docker-compose.yml
      service: standalone
  
  etcd:
    extends:
      file: ./milvus_standalone/docker-compose.yml
      service: etcd
      
  minio:
    extends:
      file: ./milvus_standalone/docker-compose.yml
      service: minio
  
  db_seed:
    extends:
      file: ./milvus_standalone/docker-compose.yml
      service: db_seed

  nginx:
    image: nginx:latest
    ports:
      - "443:443"
      - "8081:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - /etc/ssl/:/etc/ssl
    depends_on:
      - evidence_retrieval
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:4-management
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: >
      bash -c "
        # Start RabbitMQ in the background
        rabbitmq-server &
        
        # Wait for RabbitMQ to fully start
        sleep 15
        
        # Create vhost remote_host if it doesn't exist
        rabbitmqctl add_vhost remote_host || echo 'Vhost remote_host already exists'
        
        # Set full permissions for guest user on vhost remote_host
        rabbitmqctl set_permissions -p remote_host guest '.*' '.*' '.*'
        
        # Keep container running
        wait
      "
networks:
  backend:
    # Specify driver options
    driver: bridge    
volumes:
  database:
    driver: local  # Explicitly specify volume driver
  model_monitoring_data:
    name: model_monitoring_data
  # sentence-transformer-model:
  # xml-roberta-model:
  # logging:
